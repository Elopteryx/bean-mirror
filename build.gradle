plugins {
    id 'com.github.ben-manes.versions' version '0.33.0'
    id 'com.github.spotbugs' version '4.5.1'
}

task testReport(type: TestReport, group: 'Build') {
    description 'Generates an aggregate test report.'
    destinationDir file("${buildDir}/reports/allTests")
}

allprojects {
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = '0.8.6'
    }
}

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'com.github.spotbugs'

    group = 'com.github.elopteryx'
    version = '1.2.0-SNAPSHOT'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    ext {
        jmhVersion = '1.26'
        junitVersion = '5.7.0'

        checkStyleVersion = '8.36.1'
        pmdVersion = '6.27.0'
        spotbugsVersion = '4.1.2'
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = 11
        targetCompatibility = 11
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                windowTitle = 'Bean Mirror API Documentation'
                docTitle = 'Bean Mirror API Documentation'
                bottom = 'Copyright &#169; 2020 <a href="https://github.com/Elopteryx">Creative Elopteryx</a>'
                breakIterator = true
                author = false
                source = '11'
                encoding = 'UTF-8'
                docEncoding = 'UTF-8'
                failOnError = true
                links = [
                        'https://docs.oracle.com/en/java/javase/11/docs/api/'
                ]
            }
        }
    }

    checkstyle {
        toolVersion = checkStyleVersion
        configFile = new File("${projectDir}/../config/checkstyle/checkstyle.xml")
    }

    pmd {
        toolVersion = pmdVersion
        incrementalAnalysis = true
        ruleSets = []
        ruleSetConfig = resources.text.fromFile(file("${rootDir}/config/pmd/rulesSets.xml"))
    }

    spotbugs {
        toolVersion = spotbugsVersion
        effort = 'max'
    }

    spotbugsTest {
        enabled = false
    }

    jacocoTestReport {
        group = 'Coverage reports'
        description = 'Generates a test coverage report for a project'

        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    task jacocoMerge(type: JacocoMerge) {
        executionData tasks.withType(Test)

        doFirst {
            executionData = files(executionData.findAll { it.exists() })
        }
    }

    signing {
        required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask('publish') }
        sign configurations.archives
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
    }

    tasks.withType(Test) {
        rootProject.testReport.reportOn it
        it.dependsOn('jar')

        // ensure tasks don't overwrite the default report directories used by the 'test' task
        reports.html.destination = file("${buildDir}/reports/${name}")
        reports.junitXml.destination = file("${buildDir}/reports/${name}/results")
        binResultsDir = file("${buildDir}/reports/${name}/results/binary/${name}")
    }
}

repositories {
    jcenter()
}

task jacocoMerge(type: JacocoMerge) {
    subprojects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description 'Generates an aggregate report from all subprojects'
    dependsOn subprojects.test, jacocoMerge

    getAdditionalSourceDirs().from(files(subprojects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().from(files(subprojects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().from(files(subprojects.sourceSets.main.output))
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true
        xml.enabled = true
    }
}
